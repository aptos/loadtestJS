// Generated by CoffeeScript 1.3.3
var VariableGenerator;

VariableGenerator = (function() {

  function VariableGenerator() {}

  VariableGenerator.generate = function(params) {
    var count, expanded, expanded_length, header, header_list, headers, headers_n, i, key, n, path, path_list, path_n, value, var_name, _i, _ref, _ref1, _ref2;
    path_list = [];
    header_list = [];
    path = params.request.path;
    headers = params.request.headers;
    count = Math.min(params.pattern.end, 1000);
    expanded = {};
    expanded_length = 0;
    _ref = params.variables;
    for (key in _ref) {
      value = _ref[key];
      switch (value.type) {
        case 'list':
          expanded[key] = value.entries;
          expanded_length = value.entries.length;
          break;
        case 'alpha':
          expanded[key] = (function() {
            var _i, _results;
            _results = [];
            for (n = _i = 1; 1 <= count ? _i <= count : _i >= count; n = 1 <= count ? ++_i : --_i) {
              _results.push(this.random_alpha(value.min, value.max));
            }
            return _results;
          }).call(this);
          break;
        case 'number':
          expanded[key] = (function() {
            var _i, _results;
            _results = [];
            for (n = _i = 1; 1 <= count ? _i <= count : _i >= count; n = 1 <= count ? ++_i : --_i) {
              _results.push(this.random_integer(value.min, value.max));
            }
            return _results;
          }).call(this);
          break;
        case 'uuid':
          console.log("NOT IMPLEMENTED: uuid");
      }
    }
    if (expanded_length === 0) {
      expanded_length = count;
    }
    for (i = _i = 0, _ref1 = expanded_length - 1; 0 <= _ref1 ? _i <= _ref1 : _i >= _ref1; i = 0 <= _ref1 ? ++_i : --_i) {
      path_n = path;
      headers_n = {};
      _ref2 = params.variables;
      for (var_name in _ref2) {
        value = _ref2[var_name];
        path_n = path_n.replace(RegExp("\\#\\{" + var_name + "\\}", "g"), expanded[var_name][i]);
        for (header in headers) {
          value = headers[header];
          headers_n[header] = value.replace(RegExp("\\#\\{" + var_name + "\\}", "g"), expanded[var_name][i]);
        }
      }
      path_list.push(path_n);
      header_list.push(headers_n);
    }
    return [path_list, header_list];
  };

  VariableGenerator.random_alpha = function(min, max) {
    var charSet, n, word, _i, _ref;
    charSet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
    word = "";
    for (n = _i = 1, _ref = (Math.random() * (max - min)) + min; 1 <= _ref ? _i <= _ref : _i >= _ref; n = 1 <= _ref ? ++_i : --_i) {
      word += charSet[Math.floor(Math.random() * charSet.length)];
    }
    return word;
  };

  VariableGenerator.random_integer = function(min, max) {
    max = parseInt(max, 10);
    min = parseInt(min, 10);
    return Math.floor(Math.random() * (max - min)) + min;
  };

  return VariableGenerator;

})();

module.exports = VariableGenerator;
