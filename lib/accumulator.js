// Generated by CoffeeScript 1.3.3
var Accumulator;

Accumulator = (function() {

  function Accumulator(labels) {
    var label, _i, _len;
    console.info("construct Accumulator for: " + labels);
    this.data = {};
    this.x0 = {};
    this.y0 = {};
    this.t0 = {};
    this.c0 = {};
    for (_i = 0, _len = labels.length; _i < _len; _i++) {
      label = labels[_i];
      this.data[label] = [];
    }
    this.integers = true;
  }

  Accumulator.prototype.push_rate = function(label, time, value) {
    var x, y, _ref;
    x = time;
    if ((_ref = this.x0) != null ? _ref[label] : void 0) {
      y = (value - this.y0[label]) / (time - this.x0[label]);
    } else {
      console.info("First rate: " + label + " t:" + time + " v:" + value);
      y = time > 0.2 ? value / time : 0;
    }
    this.data[label].push([Math.round(x), Math.round(y)]);
    this.x0[label] = x;
    return this.y0[label] = value;
  };

  Accumulator.prototype.push_avg_rate = function(label, time, total, count) {
    var avg, x, y, _ref;
    console.info("" + label + " t:" + total + " c:" + count);
    x = time;
    if ((_ref = this.x0) != null ? _ref[label] : void 0) {
      avg = (total - this.t0[label]) / (count - this.c0[label]);
      y = (avg - this.y0[label]) / (time - this.x0[label]);
    } else {
      avg = total / count;
      y = avg / time;
    }
    this.data[label].push([Math.round(x), Math.round(y)]);
    this.x0[label] = x;
    this.y0[label] = avg;
    this.t0[label] = total;
    return this.c0[label] = count;
  };

  Accumulator.prototype.push_value = function(label, time, value) {
    return this.data[label].push([Math.round(time), Math.round(value)]);
  };

  Accumulator.prototype.push_avg = function(label, time, total, count) {
    var avg, _ref;
    if ((_ref = this.t0) != null ? _ref[label] : void 0) {
      avg = (total - this.t0[label]) / (count - this.c0[label]);
    } else {
      avg = total / count;
    }
    this.data[label].push([Math.round(time), Math.round(avg)]);
    this.t0[label] = total;
    return this.c0[label] = count;
  };

  return Accumulator;

})();

module.exports = Accumulator;
