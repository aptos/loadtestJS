// Generated by CoffeeScript 1.3.3
var RunTime, Server, express, os;

express = require('express');

os = require('os');

RunTime = require('./run_time');

Server = (function() {
  var port;

  port = 8000;

  function Server() {
    console.log("Server listening on port " + port);
    this.runner = new RunTime();
  }

  Server.prototype.start = function() {
    var app,
      _this = this;
    app = express();
    app.configure(function() {
      app.use(express.methodOverride());
      app.use(express.bodyParser());
      app.use(app.router);
    });
    app.post('/rush', function(req, res) {
      var response;
      console.log(req);
      _this.runner || (_this.runner = new RunTime());
      response = _this.runner.rush(req.body);
      return res.json(response);
    });
    app.post('/sprint', function(req, res) {
      var my_callback;
      console.log(req);
      _this.runner || (_this.runner = new RunTime());
      my_callback = function(e, r) {
        return res.json(r);
      };
      return _this.runner.sprint(req.body, my_callback);
    });
    app.get('/stats', function(req, res) {
      var response, _ref;
      if ((_ref = _this.runner) != null ? _ref.stats : void 0) {
        response = {
          ok: true,
          data: _this.runner.stats
        };
      } else {
        response = {
          ok: false,
          message: "test is not running"
        };
      }
      return res.json(response);
    });
    app.get('/chart_data', function(req, res) {
      var response, _ref;
      if ((_ref = _this.runner) != null ? _ref.chart_data : void 0) {
        response = {
          ok: true,
          finished: _this.runner.stats.finished,
          data: _this.runner.chart_data
        };
      } else {
        response = {
          ok: false,
          message: "test is not running"
        };
      }
      return res.json(response);
    });
    app.get('/stop', function(req, res) {
      var response;
      if (_this.runner) {
        response = _this.runner.stop();
      } else {
        response = {
          ok: false,
          message: "test is not running"
        };
      }
      return res.json(response);
    });
    app.get('/', function(req, res) {
      return res.sendfile('index.html');
    });
    app.get('/system', function(req, res) {
      var mem;
      mem = process.memoryUsage();
      return res.json({
        totalmem: os.totalmem(),
        freemem: os.freemem(),
        uptime: os.uptime(),
        version: process.version,
        platform: process.platform,
        rss: Math.round(mem.rss / 1024),
        heapTotal: Math.round(mem.heapTotal / 1024),
        heapUsed: Math.round(mem.heapUsed / 1024)
      });
    });
    app.listen(port);
    console.log("Server started on port " + port);
  };

  Server.prototype.shutdown = function() {
    return process.exit(0);
  };

  return Server;

})();

module.exports = Server;
