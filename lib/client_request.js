// Generated by CoffeeScript 1.3.3
var ClientRequest, http, variable_generator;

http = require('http');

variable_generator = require('./variable_generator');

ClientRequest = (function() {

  function ClientRequest(params, stats, totals) {
    var _ref;
    this.params = params;
    this.stats = stats;
    this.totals = totals;
    console.log("ClientRequest Created");
    this.request = this.params.request;
    this.path_list = [this.request.path];
    this.header_list = [this.request.headers];
    this.list_length = 1;
    if (this.params.variables) {
      _ref = variable_generator.generate(this.params), this.path_list = _ref[0], this.header_list = _ref[1];
      this.list_length = this.path_list.length;
      console.info("path_list: " + this.path_list + " header_list: " + (JSON.stringify(this.header_list)));
    }
  }

  ClientRequest.prototype.now = function() {
    return new Date().getTime();
  };

  ClientRequest.prototype.send = function(callback) {
    var req, t1,
      _this = this;
    this.request.path = this.path_list[this.stats.requests % this.list_length];
    this.request.headers = this.header_list[this.stats.requests % this.list_length];
    this.stats.requests += 1;
    t1 = this.now();
    req = http.request(this.request, function(r) {
      if (r != null ? r.statusCode : void 0) {
        _this.stats.responses += 1;
        _this.stats.response_time = _this.now() - t1;
        _this.totals.response_count += 1;
        _this.totals.response_time += _this.stats.response_time;
        _this.stats.codes[r.statusCode] = _this.stats.codes[r.statusCode] ? _this.stats.codes[r.statusCode] + 1 : 1;
        _this.stats.rx_bytes = r.socket.bytesRead;
      }
      if ((r != null ? r.statusCode : void 0) < 400) {
        _this.stats.pass += 1;
      }
      return callback(true);
    });
    req.on('error', function(e) {
      if ((e != null ? e.code : void 0) === "ECONNRESET") {
        _this.stats.timeouts += 1;
      } else {
        _this.stats.errors += 1;
        _this.stats.last_error = e.code;
      }
      callback(false);
    });
    if (this.params.data) {
      req.write(this.params.data.join("&"));
    }
    req.on('socket', function(socket) {
      socket.setTimeout(_this.params.timeout);
      return socket.on('timeout', function() {
        return req.abort();
      });
    });
    req.end();
  };

  return ClientRequest;

})();

module.exports = ClientRequest;
